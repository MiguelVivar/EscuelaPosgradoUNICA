package com.escuelaposgrado.Matricula.controller;

import com.escuelaposgrado.Matricula.dto.request.PeriodoAcademicoRequest;
import com.escuelaposgrado.Matricula.dto.response.PeriodoAcademicoResponse;
import com.escuelaposgrado.Matricula.dto.common.MessageResponse;
import com.escuelaposgrado.Matricula.service.PeriodoAcademicoService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controlador REST para la gesti√≥n de Per√≠odos Acad√©micos
 */
@Tag(name = "üìÖ Per√≠odos Acad√©micos", 
     description = "Gesti√≥n de per√≠odos acad√©micos para habilitar procesos de matr√≠cula")
@SecurityRequirement(name = "Bearer Authentication")
@RestController
@RequestMapping("/api/periodos-academicos")
@CrossOrigin(origins = "*", maxAge = 3600)
public class PeriodoAcademicoController {

    @Autowired
    private PeriodoAcademicoService periodoAcademicoService;

    @Operation(
        summary = "üìã Listar todos los per√≠odos acad√©micos",
        description = "Obtiene todos los per√≠odos acad√©micos activos del sistema"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Lista obtenida exitosamente"),
        @ApiResponse(responseCode = "401", description = "No autorizado"),
        @ApiResponse(responseCode = "403", description = "Acceso prohibido")
    })
    @GetMapping
    public ResponseEntity<List<PeriodoAcademicoResponse>> getAllPeriodos() {
        List<PeriodoAcademicoResponse> periodos = periodoAcademicoService.findAll();
        return ResponseEntity.ok(periodos);
    }

    @Operation(
        summary = "üîç Obtener per√≠odo acad√©mico por ID",
        description = "Busca un per√≠odo acad√©mico espec√≠fico por su identificador"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Per√≠odo encontrado"),
        @ApiResponse(responseCode = "404", description = "Per√≠odo no encontrado"),
        @ApiResponse(responseCode = "401", description = "No autorizado")
    })
    @GetMapping("/{id}")
    public ResponseEntity<PeriodoAcademicoResponse> getPeriodoById(
            @Parameter(description = "ID del per√≠odo acad√©mico", required = true)
            @PathVariable Long id) {
        PeriodoAcademicoResponse periodo = periodoAcademicoService.findById(id);
        return ResponseEntity.ok(periodo);
    }

    @Operation(
        summary = "üìÖ Obtener per√≠odos habilitados para matr√≠cula",
        description = "Lista todos los per√≠odos acad√©micos actualmente habilitados para el proceso de matr√≠cula"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Lista obtenida exitosamente"),
        @ApiResponse(responseCode = "401", description = "No autorizado")
    })
    @GetMapping("/habilitados")
    public ResponseEntity<List<PeriodoAcademicoResponse>> getPeriodosHabilitados() {
        List<PeriodoAcademicoResponse> periodos = periodoAcademicoService.findHabilitados();
        return ResponseEntity.ok(periodos);
    }

    @Operation(
        summary = "‚ûï Crear nuevo per√≠odo acad√©mico",
        description = "Crea un nuevo per√≠odo acad√©mico en el sistema. Requiere rol ADMIN o COORDINADOR."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Per√≠odo creado exitosamente"),
        @ApiResponse(responseCode = "400", description = "Datos inv√°lidos"),
        @ApiResponse(responseCode = "401", description = "No autorizado"),
        @ApiResponse(responseCode = "403", description = "Acceso prohibido")
    })
    @PostMapping
    public ResponseEntity<PeriodoAcademicoResponse> createPeriodo(
            @Parameter(description = "Datos del per√≠odo acad√©mico", required = true)
            @Valid @RequestBody PeriodoAcademicoRequest request) {
        PeriodoAcademicoResponse periodo = periodoAcademicoService.create(request);
        return new ResponseEntity<>(periodo, HttpStatus.CREATED);
    }

    @Operation(
        summary = "‚úèÔ∏è Actualizar per√≠odo acad√©mico",
        description = "Actualiza los datos de un per√≠odo acad√©mico existente. Requiere rol ADMIN o COORDINADOR."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Per√≠odo actualizado exitosamente"),
        @ApiResponse(responseCode = "400", description = "Datos inv√°lidos"),
        @ApiResponse(responseCode = "404", description = "Per√≠odo no encontrado"),
        @ApiResponse(responseCode = "401", description = "No autorizado")
    })
    @PutMapping("/{id}")
    public ResponseEntity<PeriodoAcademicoResponse> updatePeriodo(
            @Parameter(description = "ID del per√≠odo acad√©mico", required = true)
            @PathVariable Long id,
            @Parameter(description = "Datos actualizados del per√≠odo", required = true)
            @Valid @RequestBody PeriodoAcademicoRequest request) {
        PeriodoAcademicoResponse periodo = periodoAcademicoService.update(id, request);
        return ResponseEntity.ok(periodo);
    }

    @Operation(
        summary = "üóëÔ∏è Eliminar per√≠odo acad√©mico",
        description = "Realiza eliminaci√≥n l√≥gica de un per√≠odo acad√©mico. Requiere rol ADMIN."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Per√≠odo eliminado exitosamente"),
        @ApiResponse(responseCode = "404", description = "Per√≠odo no encontrado"),
        @ApiResponse(responseCode = "401", description = "No autorizado"),
        @ApiResponse(responseCode = "403", description = "Acceso prohibido")
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<MessageResponse> deletePeriodo(
            @Parameter(description = "ID del per√≠odo acad√©mico", required = true)
            @PathVariable Long id) {
        periodoAcademicoService.delete(id);
        return ResponseEntity.ok(MessageResponse.success("Per√≠odo acad√©mico eliminado exitosamente"));
    }

    @Operation(
        summary = "üîÑ Habilitar/Deshabilitar per√≠odo para matr√≠cula",
        description = "Cambia el estado de habilitaci√≥n de un per√≠odo acad√©mico para el proceso de matr√≠cula"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Estado cambiado exitosamente"),
        @ApiResponse(responseCode = "404", description = "Per√≠odo no encontrado"),
        @ApiResponse(responseCode = "401", description = "No autorizado")
    })
    @PatchMapping("/{id}/toggle-habilitado")
    public ResponseEntity<PeriodoAcademicoResponse> toggleHabilitado(
            @Parameter(description = "ID del per√≠odo acad√©mico", required = true)
            @PathVariable Long id) {
        PeriodoAcademicoResponse periodo = periodoAcademicoService.toggleHabilitado(id);
        return ResponseEntity.ok(periodo);
    }
}
