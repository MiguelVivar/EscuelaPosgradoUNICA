/**
 * Servicio para manejar la recuperaci칩n de contrase침as
 */

export interface RecoveryResponse {
  success: boolean;
  message: string;
}

export class RecoveryService {
  private static baseUrl = '/api';

  /**
   * Env칤a un email de recuperaci칩n de contrase침a
   */
  static async sendRecoveryEmail(email: string): Promise<RecoveryResponse> {
    try {
      console.log('Enviando solicitud de recuperaci칩n para:', email);
      
      const response = await fetch(`${this.baseUrl}/recover-password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      console.log('Respuesta del servidor:', response.status, response.statusText);

      // Verificar si la respuesta es v치lida
      if (!response.ok) {
        let errorMessage = `Error ${response.status}: ${response.statusText}`;
        
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || errorMessage;
        } catch (parseError) {
          console.error('Error al parsear respuesta de error:', parseError);
        }
        
        throw new Error(errorMessage);
      }

      // Intentar parsear JSON con manejo de errores mejorado
      let data;
      try {
        const responseText = await response.text();
        console.log('Respuesta del servidor (texto):', responseText);
        
        if (!responseText.trim()) {
          throw new Error('Respuesta vac칤a del servidor');
        }
        
        data = JSON.parse(responseText);
      } catch (parseError) {
        console.error('Error al parsear JSON:', parseError);
        throw new Error('Respuesta inv치lida del servidor. Por favor, intenta nuevamente.');
      }

      console.log('Datos parseados:', data);

      // En desarrollo, mostrar el enlace si est치 disponible
      if (process.env.NODE_ENV === 'development' && data.dev_info) {
        console.log('游댕 DESARROLLO - Enlace de recuperaci칩n:', data.dev_info.recovery_link);
        console.log('游눠 Nota:', data.dev_info.note);
      }

      return data;
    } catch (error) {
      console.error('Error en sendRecoveryEmail:', error);
      
      if (error instanceof Error) {
        throw error;
      }
      
      throw new Error('Error de conexi칩n con el servidor. Verifica tu conexi칩n a internet.');
    }
  }

  /**
   * Valida un token de recuperaci칩n
   */
  static async validateRecoveryToken(token: string): Promise<{ valid: boolean; message: string }> {
    try {
      const response = await fetch(`${this.baseUrl}/recover-password/validate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token }),
      });

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error en validateRecoveryToken:', error);
      return { valid: false, message: 'Error al validar el token' };
    }
  }

  /**
   * Restablece la contrase침a usando un token v치lido
   */
  static async resetPassword(token: string, newPassword: string, confirmPassword: string): Promise<RecoveryResponse> {
    try {
      if (newPassword !== confirmPassword) {
        throw new Error('Las contrase침as no coinciden');
      }

      if (newPassword.length < 6) {
        throw new Error('La contrase침a debe tener al menos 6 caracteres');
      }

      const response = await fetch(`${this.baseUrl}/recover-password/reset`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          token, 
          newPassword, 
          confirmPassword 
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Error al restablecer la contrase침a');
      }

      return data;
    } catch (error) {
      console.error('Error en resetPassword:', error);
      throw error;
    }
  }
}
